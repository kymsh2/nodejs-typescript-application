/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * DAWE EPaCS
 * A service for managing Export Permits and Certificates
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from "url";
import * as isomorphicFetch from "isomorphic-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "http://localhost:7071/api".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration!: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = isomorphicFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name!: "RequiredError";
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface AdditionalText
 */
export interface AdditionalText {
    /**
     * 
     * @type {string}
     * @memberof AdditionalText
     */
    code?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AdditionalText
     */
    text?: Array<string>;
}
/**
 * 
 * @export
 * @interface Address
 */
export interface Address {
    /**
     * 
     * @type {StreetAddress}
     * @memberof Address
     */
    streetAddress?: StreetAddress;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    city?: string;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    state?: string;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    country?: string;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    postalCode?: string;
}
/**
 * 
 * @export
 * @interface Attachment
 */
export interface Attachment {
    /**
     * 
     * @type {string}
     * @memberof Attachment
     */
    name?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Attachment
     */
    removeEntry?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Attachment
     */
    attachmentType?: string;
    /**
     * 
     * @type {string}
     * @memberof Attachment
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof Attachment
     */
    mimeType?: string;
    /**
     * 
     * @type {string}
     * @memberof Attachment
     */
    data?: string;
}
/**
 * 
 * @export
 * @interface AuthorisationDetails
 */
export interface AuthorisationDetails {
    /**
     * 
     * @type {string}
     * @memberof AuthorisationDetails
     */
    authorisationDate?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthorisationDetails
     */
    authorisingEstablishmentNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthorisationDetails
     */
    comments?: string;
}
/**
 * 
 * @export
 * @interface Certificate
 */
export interface Certificate {
    /**
     * 
     * @type {boolean}
     * @memberof Certificate
     */
    removeEntry?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof Certificate
     */
    lineNumbers?: Array<string>;
    /**
     * 
     * @type {LineCertificateDetails}
     * @memberof Certificate
     */
    certificateDetails?: LineCertificateDetails;
    /**
     * 
     * @type {CertificatePrintDetails}
     * @memberof Certificate
     */
    certificatePrintDetails?: CertificatePrintDetails;
}
/**
 * 
 * @export
 * @interface CertificateDetails
 */
export interface CertificateDetails {
    /**
     * 
     * @type {CertificatePrintControls}
     * @memberof CertificateDetails
     */
    certificatePrintControls?: CertificatePrintControls;
    /**
     * 
     * @type {Certificates}
     * @memberof CertificateDetails
     */
    certificates?: Certificates;
}
/**
 * 
 * @export
 * @interface CertificatePrintControls
 */
export interface CertificatePrintControls {
    /**
     * 
     * @type {string}
     * @memberof CertificatePrintControls
     */
    certificatePrintIndicator?: CertificatePrintControls.CertificatePrintIndicatorEnum;
    /**
     * 
     * @type {string}
     * @memberof CertificatePrintControls
     */
    certificatePrintRegion?: string;
    /**
     * 
     * @type {string}
     * @memberof CertificatePrintControls
     */
    certificateRequiredClientGroup?: string;
    /**
     * 
     * @type {string}
     * @memberof CertificatePrintControls
     */
    separateBy?: CertificatePrintControls.SeparateByEnum;
}

/**
 * @export
 * @namespace CertificatePrintControls
 */
export namespace CertificatePrintControls {
    /**
     * @export
     * @enum {string}
     */
    export enum CertificatePrintIndicatorEnum {
        A = <any> 'A',
        C = <any> 'C',
        M = <any> 'M',
        N = <any> 'N'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum SeparateByEnum {
        CONTAINER = <any> 'CONTAINER',
        PACKINGESTABLISHMENT = <any> 'PACKING_ESTABLISHMENT',
        SHIPPINGMARK = <any> 'SHIPPING_MARK'
    }
}
/**
 * 
 * @export
 * @interface CertificatePrintDetails
 */
export interface CertificatePrintDetails {
    /**
     * 
     * @type {string}
     * @memberof CertificatePrintDetails
     */
    certificatePrintRegion?: string;
    /**
     * 
     * @type {string}
     * @memberof CertificatePrintDetails
     */
    certificateRequiredClientGroup?: string;
}
/**
 * 
 * @export
 * @interface Certificates
 */
export interface Certificates {
    /**
     * 
     * @type {Array<Certificate>}
     * @memberof Certificates
     */
    values?: Array<Certificate>;
    /**
     * 
     * @type {boolean}
     * @memberof Certificates
     */
    removeExistingSet?: boolean;
    /**
     * 
     * @type {Array<Certificate>}
     * @memberof Certificates
     */
    primaryCertificates?: Array<Certificate>;
    /**
     * 
     * @type {Array<ExtraCertificate>}
     * @memberof Certificates
     */
    extraCertificates?: Array<ExtraCertificate>;
}
/**
 * 
 * @export
 * @interface ConsigneeDetails
 */
export interface ConsigneeDetails {
    /**
     * 
     * @type {string}
     * @memberof ConsigneeDetails
     */
    consigneeName?: string;
    /**
     * 
     * @type {Address}
     * @memberof ConsigneeDetails
     */
    consigneeAddress?: Address;
    /**
     * 
     * @type {string}
     * @memberof ConsigneeDetails
     */
    consigneePhoneNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof ConsigneeDetails
     */
    consigneeRepresentative?: string;
}
/**
 * 
 * @export
 * @interface Container
 */
export interface Container {
    /**
     * 
     * @type {string}
     * @memberof Container
     */
    containerNumber?: string;
    /**
     * 
     * @type {Array<ContainerSeal>}
     * @memberof Container
     */
    containerSeals?: Array<ContainerSeal>;
}
/**
 * 
 * @export
 * @interface ContainerSeal
 */
export interface ContainerSeal {
    /**
     * 
     * @type {string}
     * @memberof ContainerSeal
     */
    sealNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof ContainerSeal
     */
    sealStartNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof ContainerSeal
     */
    sealEndNumber?: string;
}
/**
 * 
 * @export
 * @interface Containers
 */
export interface Containers {
    /**
     * 
     * @type {Array<Container>}
     * @memberof Containers
     */
    values?: Array<Container>;
    /**
     * 
     * @type {boolean}
     * @memberof Containers
     */
    removeExistingSet?: boolean;
}
/**
 * 
 * @export
 * @interface CustomDetails
 */
export interface CustomDetails {
    /**
     * 
     * @type {boolean}
     * @memberof CustomDetails
     */
    customsAgentIndicator?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CustomDetails
     */
    edn?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomDetails
     */
    currency?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomDetails
     */
    consigneeName?: string;
}
/**
 * 
 * @export
 * @interface DischargePorts
 */
export interface DischargePorts {
    /**
     * 
     * @type {Array<string>}
     * @memberof DischargePorts
     */
    values?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof DischargePorts
     */
    removeExistingSet?: boolean;
}
/**
 * 
 * @export
 * @interface EpacAmendRequest
 */
export interface EpacAmendRequest {
    /**
     * 
     * @type {boolean}
     * @memberof EpacAmendRequest
     */
    submitAmendmentRequest?: boolean;
    /**
     * 
     * @type {string}
     * @memberof EpacAmendRequest
     */
    amendmentReason?: string;
    /**
     * 
     * @type {SubmissionIdentification}
     * @memberof EpacAmendRequest
     */
    identification?: SubmissionIdentification;
    /**
     * 
     * @type {ExportDetails}
     * @memberof EpacAmendRequest
     */
    exportDetails?: ExportDetails;
    /**
     * 
     * @type {CertificateDetails}
     * @memberof EpacAmendRequest
     */
    certificateDetails?: CertificateDetails;
    /**
     * 
     * @type {ProductLines}
     * @memberof EpacAmendRequest
     */
    productLines?: ProductLines;
    /**
     * 
     * @type {Array<Manufacturer>}
     * @memberof EpacAmendRequest
     */
    manufacturers?: Array<Manufacturer>;
    /**
     * 
     * @type {Array<Attachment>}
     * @memberof EpacAmendRequest
     */
    attachments?: Array<Attachment>;
    /**
     * 
     * @type {Array<AdditionalText>}
     * @memberof EpacAmendRequest
     */
    additionalTexts?: Array<AdditionalText>;
    /**
     * 
     * @type {EuTransit}
     * @memberof EpacAmendRequest
     */
    euTransit?: EuTransit;
    /**
     * 
     * @type {string}
     * @memberof EpacAmendRequest
     */
    commodity?: string;
}
/**
 * 
 * @export
 * @interface EpacAmendResponse
 */
export interface EpacAmendResponse {
    /**
     * 
     * @type {RexResponseDetails}
     * @memberof EpacAmendResponse
     */
    rexResponseDetails?: RexResponseDetails;
    /**
     * 
     * @type {Array<Notice>}
     * @memberof EpacAmendResponse
     */
    validationNotices?: Array<Notice>;
    /**
     * 
     * @type {Array<RexLine>}
     * @memberof EpacAmendResponse
     */
    rexLines?: Array<RexLine>;
    /**
     * 
     * @type {string}
     * @memberof EpacAmendResponse
     */
    rexResponseType?: EpacAmendResponse.RexResponseTypeEnum;
}

/**
 * @export
 * @namespace EpacAmendResponse
 */
export namespace EpacAmendResponse {
    /**
     * @export
     * @enum {string}
     */
    export enum RexResponseTypeEnum {
        AP = <any> 'AP',
        RE = <any> 'RE'
    }
}
/**
 * 
 * @export
 * @interface EpacError
 */
export interface EpacError {
    /**
     * 
     * @type {string}
     * @memberof EpacError
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof EpacError
     */
    title?: string;
    /**
     * 
     * @type {any}
     * @memberof EpacError
     */
    detail?: any;
    /**
     * 
     * @type {string}
     * @memberof EpacError
     */
    instance?: string;
}
/**
 * 
 * @export
 * @interface EpacLodgeRequest
 */
export interface EpacLodgeRequest {
    /**
     * 
     * @type {SubmissionIdentification}
     * @memberof EpacLodgeRequest
     */
    identification?: SubmissionIdentification;
    /**
     * 
     * @type {ExportDetails}
     * @memberof EpacLodgeRequest
     */
    exportDetails?: ExportDetails;
    /**
     * 
     * @type {CertificateDetails}
     * @memberof EpacLodgeRequest
     */
    certificateDetails?: CertificateDetails;
    /**
     * 
     * @type {ProductLines}
     * @memberof EpacLodgeRequest
     */
    productLines?: ProductLines;
    /**
     * 
     * @type {Array<Manufacturer>}
     * @memberof EpacLodgeRequest
     */
    manufacturers?: Array<Manufacturer>;
    /**
     * 
     * @type {Array<Attachment>}
     * @memberof EpacLodgeRequest
     */
    attachments?: Array<Attachment>;
    /**
     * 
     * @type {Array<AdditionalText>}
     * @memberof EpacLodgeRequest
     */
    additionalTexts?: Array<AdditionalText>;
    /**
     * 
     * @type {EuTransit}
     * @memberof EpacLodgeRequest
     */
    euTransit?: EuTransit;
    /**
     * 
     * @type {string}
     * @memberof EpacLodgeRequest
     */
    commodity?: string;
}
/**
 * 
 * @export
 * @interface EpacLodgeResponse
 */
export interface EpacLodgeResponse {
    /**
     * 
     * @type {RexResponseDetails}
     * @memberof EpacLodgeResponse
     */
    rexResponseDetails?: RexResponseDetails;
    /**
     * 
     * @type {Array<Notice>}
     * @memberof EpacLodgeResponse
     */
    validationNotices?: Array<Notice>;
    /**
     * 
     * @type {Array<RexLine>}
     * @memberof EpacLodgeResponse
     */
    rexLines?: Array<RexLine>;
    /**
     * 
     * @type {string}
     * @memberof EpacLodgeResponse
     */
    rexResponseType?: EpacLodgeResponse.RexResponseTypeEnum;
}

/**
 * @export
 * @namespace EpacLodgeResponse
 */
export namespace EpacLodgeResponse {
    /**
     * @export
     * @enum {string}
     */
    export enum RexResponseTypeEnum {
        AP = <any> 'AP',
        RE = <any> 'RE'
    }
}
/**
 * 
 * @export
 * @interface EpacOrderRequest
 */
export interface EpacOrderRequest {
    /**
     * 
     * @type {SubmissionIdentification}
     * @memberof EpacOrderRequest
     */
    identification?: SubmissionIdentification;
    /**
     * 
     * @type {ExportDetails}
     * @memberof EpacOrderRequest
     */
    exportDetails?: ExportDetails;
    /**
     * 
     * @type {CertificateDetails}
     * @memberof EpacOrderRequest
     */
    certificateDetails?: CertificateDetails;
    /**
     * 
     * @type {ProductLines}
     * @memberof EpacOrderRequest
     */
    productLines?: ProductLines;
    /**
     * 
     * @type {Array<Manufacturer>}
     * @memberof EpacOrderRequest
     */
    manufacturers?: Array<Manufacturer>;
    /**
     * 
     * @type {Array<Attachment>}
     * @memberof EpacOrderRequest
     */
    attachments?: Array<Attachment>;
    /**
     * 
     * @type {Array<AdditionalText>}
     * @memberof EpacOrderRequest
     */
    additionalTexts?: Array<AdditionalText>;
    /**
     * 
     * @type {EuTransit}
     * @memberof EpacOrderRequest
     */
    euTransit?: EuTransit;
    /**
     * 
     * @type {string}
     * @memberof EpacOrderRequest
     */
    commodity?: string;
}
/**
 * 
 * @export
 * @interface EpacOrderResponse
 */
export interface EpacOrderResponse {
    /**
     * 
     * @type {RexResponseDetails}
     * @memberof EpacOrderResponse
     */
    rexResponseDetails?: RexResponseDetails;
    /**
     * 
     * @type {Array<Notice>}
     * @memberof EpacOrderResponse
     */
    validationNotices?: Array<Notice>;
    /**
     * 
     * @type {Array<RexLine>}
     * @memberof EpacOrderResponse
     */
    rexLines?: Array<RexLine>;
    /**
     * 
     * @type {string}
     * @memberof EpacOrderResponse
     */
    rexResponseType?: EpacOrderResponse.RexResponseTypeEnum;
}

/**
 * @export
 * @namespace EpacOrderResponse
 */
export namespace EpacOrderResponse {
    /**
     * @export
     * @enum {string}
     */
    export enum RexResponseTypeEnum {
        AP = <any> 'AP',
        RE = <any> 'RE'
    }
}
/**
 * 
 * @export
 * @interface EpacValidationError
 */
export interface EpacValidationError {
    /**
     * 
     * @type {Array<string>}
     * @memberof EpacValidationError
     */
    errors?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof EpacValidationError
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof EpacValidationError
     */
    title?: string;
    /**
     * 
     * @type {any}
     * @memberof EpacValidationError
     */
    detail?: any;
    /**
     * 
     * @type {string}
     * @memberof EpacValidationError
     */
    instance?: string;
}
/**
 * 
 * @export
 * @interface EuContactInformation
 */
export interface EuContactInformation {
    /**
     * 
     * @type {string}
     * @memberof EuContactInformation
     */
    contactName?: string;
    /**
     * 
     * @type {string}
     * @memberof EuContactInformation
     */
    contactPhone?: string;
    /**
     * 
     * @type {string}
     * @memberof EuContactInformation
     */
    comments?: string;
    /**
     * 
     * @type {boolean}
     * @memberof EuContactInformation
     */
    testResultRequired?: boolean;
}
/**
 * 
 * @export
 * @interface EuPlaceOfDestinationDetails
 */
export interface EuPlaceOfDestinationDetails {
    /**
     * 
     * @type {string}
     * @memberof EuPlaceOfDestinationDetails
     */
    name?: string;
    /**
     * 
     * @type {Address}
     * @memberof EuPlaceOfDestinationDetails
     */
    address?: Address;
    /**
     * 
     * @type {string}
     * @memberof EuPlaceOfDestinationDetails
     */
    approvalNumber?: string;
}
/**
 * 
 * @export
 * @interface EuTransit
 */
export interface EuTransit {
    /**
     * 
     * @type {PersonResponsible}
     * @memberof EuTransit
     */
    personResponsible?: PersonResponsible;
    /**
     * 
     * @type {PlaceOfDestinationDetails}
     * @memberof EuTransit
     */
    placeOfDestinationDetails?: PlaceOfDestinationDetails;
}
/**
 * 
 * @export
 * @interface ExportDetails
 */
export interface ExportDetails {
    /**
     * 
     * @type {string}
     * @memberof ExportDetails
     */
    commodityType?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportDetails
     */
    priority?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportDetails
     */
    departureDate?: string;
    /**
     * 
     * @type {TransportDetails}
     * @memberof ExportDetails
     */
    transportDetails?: TransportDetails;
    /**
     * 
     * @type {string}
     * @memberof ExportDetails
     */
    destinationCity?: string;
    /**
     * 
     * @type {DischargePorts}
     * @memberof ExportDetails
     */
    dischargePorts?: DischargePorts;
    /**
     * 
     * @type {string}
     * @memberof ExportDetails
     */
    destinationCountry?: string;
    /**
     * 
     * @type {TransitCountries}
     * @memberof ExportDetails
     */
    transitCountries?: TransitCountries;
    /**
     * 
     * @type {string}
     * @memberof ExportDetails
     */
    borderInspectionPort?: string;
    /**
     * 
     * @type {LoadingPorts}
     * @memberof ExportDetails
     */
    loadingPorts?: LoadingPorts;
    /**
     * 
     * @type {ImportPermits}
     * @memberof ExportDetails
     */
    importPermits?: ImportPermits;
    /**
     * 
     * @type {CustomDetails}
     * @memberof ExportDetails
     */
    sew?: CustomDetails;
    /**
     * 
     * @type {string}
     * @memberof ExportDetails
     */
    ownerExporterId?: string;
    /**
     * 
     * @type {ExporterDeclaration}
     * @memberof ExportDetails
     */
    exporterDeclaration?: ExporterDeclaration;
    /**
     * 
     * @type {ImaDetailsList}
     * @memberof ExportDetails
     */
    imaDetails?: ImaDetailsList;
    /**
     * 
     * @type {string}
     * @memberof ExportDetails
     */
    exporterReference?: string;
    /**
     * 
     * @type {ConsigneeDetails}
     * @memberof ExportDetails
     */
    consigneeDetails?: ConsigneeDetails;
    /**
     * 
     * @type {MessageAcknowledgements}
     * @memberof ExportDetails
     */
    messageAcknowledgements?: MessageAcknowledgements;
    /**
     * 
     * @type {string}
     * @memberof ExportDetails
     */
    preferredWeightUnit?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportDetails
     */
    tracesApprovalId?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportDetails
     */
    productUseIndicator?: ExportDetails.ProductUseIndicatorEnum;
    /**
     * 
     * @type {boolean}
     * @memberof ExportDetails
     */
    importedProductFlag?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ExportDetails
     */
    manufacturedTreatedPackagedLabelledInAustralia?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ExportDetails
     */
    legallyImported?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ExportDetails
     */
    lotNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportDetails
     */
    storageEstablishmentNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportDetails
     */
    quotaYear?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ExportDetails
     */
    quotaFlag?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ExportDetails
     */
    quotaType?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ExportDetails
     */
    shipStoresFlag?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ExportDetails
     */
    exemptionCode?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ExportDetails
     */
    authorisationFlag?: boolean;
    /**
     * 
     * @type {AuthorisationDetails}
     * @memberof ExportDetails
     */
    authorisationDetails?: AuthorisationDetails;
    /**
     * 
     * @type {EuContactInformation}
     * @memberof ExportDetails
     */
    euContactInformation?: EuContactInformation;
}

/**
 * @export
 * @namespace ExportDetails
 */
export namespace ExportDetails {
    /**
     * @export
     * @enum {string}
     */
    export enum ProductUseIndicatorEnum {
        H = <any> 'H',
        A = <any> 'A',
        F = <any> 'F',
        T = <any> 'T',
        O = <any> 'O'
    }
}
/**
 * 
 * @export
 * @interface ExporterDeclaration
 */
export interface ExporterDeclaration {
    /**
     * 
     * @type {string}
     * @memberof ExporterDeclaration
     */
    exporterDeclaration?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ExporterDeclaration
     */
    exporterDeclarationCodes?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof ExporterDeclaration
     */
    removeExistingSet?: boolean;
}
/**
 * 
 * @export
 * @interface ExtraCertificate
 */
export interface ExtraCertificate {
    /**
     * 
     * @type {boolean}
     * @memberof ExtraCertificate
     */
    removeEntry?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof ExtraCertificate
     */
    lineNumbers?: Array<string>;
    /**
     * 
     * @type {ExtraCertificateDetails}
     * @memberof ExtraCertificate
     */
    certificateDetails?: ExtraCertificateDetails;
    /**
     * 
     * @type {CertificatePrintDetails}
     * @memberof ExtraCertificate
     */
    certificatePrintDetails?: CertificatePrintDetails;
}
/**
 * 
 * @export
 * @interface ExtraCertificateDetails
 */
export interface ExtraCertificateDetails {
    /**
     * 
     * @type {string}
     * @memberof ExtraCertificateDetails
     */
    certificateTemplate?: string;
}
/**
 * 
 * @export
 * @interface FormType
 */
export interface FormType {
    /**
     * 
     * @type {string}
     * @memberof FormType
     */
    templateCode?: string;
    /**
     * 
     * @type {string}
     * @memberof FormType
     */
    endorsementNumber?: string;
}
/**
 * 
 * @export
 * @interface HealthCheckResponse
 */
export interface HealthCheckResponse {
    /**
     * 
     * @type {number}
     * @memberof HealthCheckResponse
     */
    status?: HealthCheckResponse.StatusEnum;
    /**
     * 
     * @type {string}
     * @memberof HealthCheckResponse
     */
    version?: string;
    /**
     * 
     * @type {string}
     * @memberof HealthCheckResponse
     */
    releaseId?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof HealthCheckResponse
     */
    notes?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof HealthCheckResponse
     */
    output?: string;
    /**
     * 
     * @type {string}
     * @memberof HealthCheckResponse
     */
    serviceId?: string;
    /**
     * 
     * @type {string}
     * @memberof HealthCheckResponse
     */
    description?: string;
    /**
     * 
     * @type {{ [key: string]: ListHealthCheckResult; }}
     * @memberof HealthCheckResponse
     */
    checks?: { [key: string]: ListHealthCheckResult; };
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof HealthCheckResponse
     */
    links?: { [key: string]: string; };
}

/**
 * @export
 * @namespace HealthCheckResponse
 */
export namespace HealthCheckResponse {
    /**
     * @export
     * @enum {string}
     */
    export enum StatusEnum {
        NUMBER_1 = <any> 1,
        NUMBER_2 = <any> 2,
        NUMBER_3 = <any> 3
    }
}
/**
 * 
 * @export
 * @interface HealthCheckResult
 */
export interface HealthCheckResult {
    /**
     * 
     * @type {string}
     * @memberof HealthCheckResult
     */
    componentId?: string;
    /**
     * 
     * @type {number}
     * @memberof HealthCheckResult
     */
    node?: number;
    /**
     * 
     * @type {string}
     * @memberof HealthCheckResult
     */
    componentType?: string;
    /**
     * 
     * @type {any}
     * @memberof HealthCheckResult
     */
    observedValue?: any;
    /**
     * 
     * @type {string}
     * @memberof HealthCheckResult
     */
    observedUnit?: string;
    /**
     * 
     * @type {number}
     * @memberof HealthCheckResult
     */
    status?: HealthCheckResult.StatusEnum;
    /**
     * 
     * @type {Date}
     * @memberof HealthCheckResult
     */
    time?: Date;
    /**
     * 
     * @type {string}
     * @memberof HealthCheckResult
     */
    output?: string;
}

/**
 * @export
 * @namespace HealthCheckResult
 */
export namespace HealthCheckResult {
    /**
     * @export
     * @enum {string}
     */
    export enum StatusEnum {
        NUMBER_1 = <any> 1,
        NUMBER_2 = <any> 2,
        NUMBER_3 = <any> 3
    }
}
/**
 * 
 * @export
 * @interface Identification
 */
export interface Identification {
    /**
     * 
     * @type {string}
     * @memberof Identification
     */
    rexNumber?: string;
}
/**
 * 
 * @export
 * @interface ImaDetails
 */
export interface ImaDetails {
    /**
     * 
     * @type {string}
     * @memberof ImaDetails
     */
    serialNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof ImaDetails
     */
    containerNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof ImaDetails
     */
    sealNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof ImaDetails
     */
    invoiceDate?: string;
    /**
     * 
     * @type {string}
     * @memberof ImaDetails
     */
    invoiceNumber?: string;
    /**
     * 
     * @type {Weight}
     * @memberof ImaDetails
     */
    grossWeight?: Weight;
    /**
     * 
     * @type {Weight}
     * @memberof ImaDetails
     */
    netWeight?: Weight;
    /**
     * 
     * @type {string}
     * @memberof ImaDetails
     */
    productDescription?: string;
    /**
     * 
     * @type {string}
     * @memberof ImaDetails
     */
    quotaYear?: string;
}
/**
 * 
 * @export
 * @interface ImaDetailsList
 */
export interface ImaDetailsList {
    /**
     * 
     * @type {Array<ImaDetails>}
     * @memberof ImaDetailsList
     */
    values?: Array<ImaDetails>;
    /**
     * 
     * @type {boolean}
     * @memberof ImaDetailsList
     */
    removeExistingSet?: boolean;
}
/**
 * 
 * @export
 * @interface ImportPermit
 */
export interface ImportPermit {
    /**
     * 
     * @type {string}
     * @memberof ImportPermit
     */
    importPermitNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof ImportPermit
     */
    importPermitDate?: string;
}
/**
 * 
 * @export
 * @interface ImportPermits
 */
export interface ImportPermits {
    /**
     * 
     * @type {Array<ImportPermit>}
     * @memberof ImportPermits
     */
    values?: Array<ImportPermit>;
    /**
     * 
     * @type {boolean}
     * @memberof ImportPermits
     */
    removeExistingSet?: boolean;
}
/**
 * 
 * @export
 * @interface LineCertificateDetails
 */
export interface LineCertificateDetails {
    /**
     * 
     * @type {string}
     * @memberof LineCertificateDetails
     */
    certificateTemplate?: string;
    /**
     * 
     * @type {string}
     * @memberof LineCertificateDetails
     */
    certificateEndorsement?: string;
}
/**
 * 
 * @export
 */
export type ListHealthCheckResult = Array<HealthCheckResult>
/**
 * 
 * @export
 * @interface LoadingPorts
 */
export interface LoadingPorts {
    /**
     * 
     * @type {Array<string>}
     * @memberof LoadingPorts
     */
    values?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof LoadingPorts
     */
    removeExistingSet?: boolean;
}
/**
 * 
 * @export
 * @interface Manufacturer
 */
export interface Manufacturer {
    /**
     * 
     * @type {Array<string>}
     * @memberof Manufacturer
     */
    lineNumbers?: Array<string>;
    /**
     * 
     * @type {ManufacturerDetails}
     * @memberof Manufacturer
     */
    manufacturerDetails?: ManufacturerDetails;
}
/**
 * 
 * @export
 * @interface ManufacturerDetails
 */
export interface ManufacturerDetails {
    /**
     * 
     * @type {string}
     * @memberof ManufacturerDetails
     */
    name?: string;
    /**
     * 
     * @type {Address}
     * @memberof ManufacturerDetails
     */
    address?: Address;
}
/**
 * 
 * @export
 * @interface MessageAcknowledgements
 */
export interface MessageAcknowledgements {
    /**
     * 
     * @type {boolean}
     * @memberof MessageAcknowledgements
     */
    removeExistingSet?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof MessageAcknowledgements
     */
    values?: Array<string>;
}
/**
 * 
 * @export
 * @interface Notice
 */
export interface Notice {
    /**
     * 
     * @type {string}
     * @memberof Notice
     */
    noticeId?: string;
    /**
     * 
     * @type {string}
     * @memberof Notice
     */
    noticeType?: Notice.NoticeTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Notice
     */
    noticeMessage?: string;
}

/**
 * @export
 * @namespace Notice
 */
export namespace Notice {
    /**
     * @export
     * @enum {string}
     */
    export enum NoticeTypeEnum {
        I = <any> 'I',
        W = <any> 'W',
        E = <any> 'E'
    }
}
/**
 * 
 * @export
 * @interface OuterProductPackaging
 */
export interface OuterProductPackaging {
    /**
     * 
     * @type {PackageQuantity}
     * @memberof OuterProductPackaging
     */
    quantity?: PackageQuantity;
    /**
     * 
     * @type {UnitAmount}
     * @memberof OuterProductPackaging
     */
    unitAmount?: UnitAmount;
    /**
     * 
     * @type {string}
     * @memberof OuterProductPackaging
     */
    packageMeasureAccuracy?: OuterProductPackaging.PackageMeasureAccuracyEnum;
    /**
     * 
     * @type {string}
     * @memberof OuterProductPackaging
     */
    shippingMarks?: string;
}

/**
 * @export
 * @namespace OuterProductPackaging
 */
export namespace OuterProductPackaging {
    /**
     * @export
     * @enum {string}
     */
    export enum PackageMeasureAccuracyEnum {
        A = <any> 'A',
        E = <any> 'E'
    }
}
/**
 * 
 * @export
 * @interface PackageQuantity
 */
export interface PackageQuantity {
    /**
     * 
     * @type {string}
     * @memberof PackageQuantity
     */
    packageType?: string;
    /**
     * 
     * @type {string}
     * @memberof PackageQuantity
     */
    value?: string;
}
/**
 * 
 * @export
 * @interface PersonResponsible
 */
export interface PersonResponsible {
    /**
     * 
     * @type {Address}
     * @memberof PersonResponsible
     */
    address?: Address;
    /**
     * 
     * @type {string}
     * @memberof PersonResponsible
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonResponsible
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonResponsible
     */
    phoneNumber?: string;
}
/**
 * 
 * @export
 * @interface PlaceOfDestinationDetails
 */
export interface PlaceOfDestinationDetails {
    /**
     * 
     * @type {string}
     * @memberof PlaceOfDestinationDetails
     */
    name?: string;
    /**
     * 
     * @type {Address}
     * @memberof PlaceOfDestinationDetails
     */
    address?: Address;
    /**
     * 
     * @type {string}
     * @memberof PlaceOfDestinationDetails
     */
    phoneNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof PlaceOfDestinationDetails
     */
    approvalNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof PlaceOfDestinationDetails
     */
    transitLocationType?: PlaceOfDestinationDetails.TransitLocationTypeEnum;
}

/**
 * @export
 * @namespace PlaceOfDestinationDetails
 */
export namespace PlaceOfDestinationDetails {
    /**
     * @export
     * @enum {string}
     */
    export enum TransitLocationTypeEnum {
        C = <any> 'C',
        S = <any> 'S'
    }
}
/**
 * 
 * @export
 * @interface ProcessingEstablishment
 */
export interface ProcessingEstablishment {
    /**
     * 
     * @type {string}
     * @memberof ProcessingEstablishment
     */
    establishmentName?: string;
    /**
     * 
     * @type {Address}
     * @memberof ProcessingEstablishment
     */
    establishmentAddress?: Address;
    /**
     * 
     * @type {TelephoneNumber}
     * @memberof ProcessingEstablishment
     */
    contactPhoneNumber?: TelephoneNumber;
    /**
     * 
     * @type {string}
     * @memberof ProcessingEstablishment
     */
    contactName?: string;
}
/**
 * 
 * @export
 * @interface ProductDetails
 */
export interface ProductDetails {
    /**
     * 
     * @type {string}
     * @memberof ProductDetails
     */
    productType?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductDetails
     */
    category?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductDetails
     */
    packType?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductDetails
     */
    preservationType?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductDetails
     */
    cutType?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductDetails
     */
    suppCode?: string;
    /**
     * 
     * @type {OuterProductPackaging}
     * @memberof ProductDetails
     */
    outerProductPackaging?: OuterProductPackaging;
    /**
     * 
     * @type {ProductPackaging}
     * @memberof ProductDetails
     */
    intermediateProductPackaging?: ProductPackaging;
    /**
     * 
     * @type {ProductPackaging}
     * @memberof ProductDetails
     */
    innerProductPackaging?: ProductPackaging;
    /**
     * 
     * @type {Weight}
     * @memberof ProductDetails
     */
    netMetricWeight?: Weight;
    /**
     * 
     * @type {Weight}
     * @memberof ProductDetails
     */
    netImperialWeight?: Weight;
    /**
     * 
     * @type {string}
     * @memberof ProductDetails
     */
    manualCertificateProductDescription?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductDetails
     */
    additionalDescription?: string;
}
/**
 * 
 * @export
 * @interface ProductLine
 */
export interface ProductLine {
    /**
     * 
     * @type {string}
     * @memberof ProductLine
     */
    lineNumber?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ProductLine
     */
    removeEntry?: boolean;
    /**
     * 
     * @type {ProductDetails}
     * @memberof ProductLine
     */
    productDetails?: ProductDetails;
    /**
     * 
     * @type {Containers}
     * @memberof ProductLine
     */
    containers?: Containers;
    /**
     * 
     * @type {Treatments}
     * @memberof ProductLine
     */
    treatments?: Treatments;
    /**
     * 
     * @type {ProductionProcesses}
     * @memberof ProductLine
     */
    productionProcesses?: ProductionProcesses;
    /**
     * 
     * @type {ProductLineCustomDetails}
     * @memberof ProductLine
     */
    sew?: ProductLineCustomDetails;
    /**
     * 
     * @type {string}
     * @memberof ProductLine
     */
    durabilityStartDate?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductLine
     */
    durabilityEndDate?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductLine
     */
    aheccCode?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductLine
     */
    batchCode?: string;
    /**
     * 
     * @type {Array<AdditionalText>}
     * @memberof ProductLine
     */
    additionalTexts?: Array<AdditionalText>;
    /**
     * 
     * @type {ProductSourceCountries}
     * @memberof ProductLine
     */
    productSourceCountries?: ProductSourceCountries;
    /**
     * 
     * @type {Array<Attachment>}
     * @memberof ProductLine
     */
    attachments?: Array<Attachment>;
    /**
     * 
     * @type {string}
     * @memberof ProductLine
     */
    importAuthorityCode?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductLine
     */
    natureOfCommodity?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductLine
     */
    euTreatmentType?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductLine
     */
    quotaExporter?: string;
}
/**
 * 
 * @export
 * @interface ProductLineCustomDetails
 */
export interface ProductLineCustomDetails {
    /**
     * 
     * @type {Weight}
     * @memberof ProductLineCustomDetails
     */
    netCustomsWeight?: Weight;
    /**
     * 
     * @type {Weight}
     * @memberof ProductLineCustomDetails
     */
    grossMetricWeight?: Weight;
    /**
     * 
     * @type {number}
     * @memberof ProductLineCustomDetails
     */
    fobAmount?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductLineCustomDetails
     */
    productSourceState?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductLineCustomDetails
     */
    relatedPermitType?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductLineCustomDetails
     */
    relatedPermitNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductLineCustomDetails
     */
    relatedPermitDate?: string;
}
/**
 * 
 * @export
 * @interface ProductLines
 */
export interface ProductLines {
    /**
     * 
     * @type {Array<ProductLine>}
     * @memberof ProductLines
     */
    values?: Array<ProductLine>;
    /**
     * 
     * @type {boolean}
     * @memberof ProductLines
     */
    retainProductLines?: boolean;
}
/**
 * 
 * @export
 * @interface ProductPackaging
 */
export interface ProductPackaging {
    /**
     * 
     * @type {PackageQuantity}
     * @memberof ProductPackaging
     */
    quantity?: PackageQuantity;
    /**
     * 
     * @type {UnitAmount}
     * @memberof ProductPackaging
     */
    unitAmount?: UnitAmount;
    /**
     * 
     * @type {string}
     * @memberof ProductPackaging
     */
    packageMeasureAccuracy?: ProductPackaging.PackageMeasureAccuracyEnum;
}

/**
 * @export
 * @namespace ProductPackaging
 */
export namespace ProductPackaging {
    /**
     * @export
     * @enum {string}
     */
    export enum PackageMeasureAccuracyEnum {
        A = <any> 'A',
        E = <any> 'E'
    }
}
/**
 * 
 * @export
 * @interface ProductSourceCountries
 */
export interface ProductSourceCountries {
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductSourceCountries
     */
    values?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof ProductSourceCountries
     */
    removeExistingSet?: boolean;
}
/**
 * 
 * @export
 * @interface ProductionProcess
 */
export interface ProductionProcess {
    /**
     * 
     * @type {string}
     * @memberof ProductionProcess
     */
    processGroup?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductionProcess
     */
    processingStartDate?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductionProcess
     */
    processingEndDate?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductionProcess
     */
    establishmentIndicator?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductionProcess
     */
    processingEstablishmentNumber?: string;
    /**
     * 
     * @type {ProcessingEstablishment}
     * @memberof ProductionProcess
     */
    processingEstablishment?: ProcessingEstablishment;
}
/**
 * 
 * @export
 * @interface ProductionProcesses
 */
export interface ProductionProcesses {
    /**
     * 
     * @type {Array<ProductionProcess>}
     * @memberof ProductionProcesses
     */
    values?: Array<ProductionProcess>;
    /**
     * 
     * @type {boolean}
     * @memberof ProductionProcesses
     */
    removeExistingSet?: boolean;
}
/**
 * 
 * @export
 * @interface ReadRexResponse
 */
export interface ReadRexResponse {
    /**
     * 
     * @type {RexResponseDetails}
     * @memberof ReadRexResponse
     */
    readRexResponseDetails?: RexResponseDetails;
    /**
     * 
     * @type {ExportDetails}
     * @memberof ReadRexResponse
     */
    exportDetails?: ExportDetails;
    /**
     * 
     * @type {ProductLines}
     * @memberof ReadRexResponse
     */
    productLines?: ProductLines;
    /**
     * 
     * @type {ManufacturerDetails}
     * @memberof ReadRexResponse
     */
    manufacturers?: ManufacturerDetails;
    /**
     * 
     * @type {CertificateDetails}
     * @memberof ReadRexResponse
     */
    certificateDetails?: CertificateDetails;
}
/**
 * 
 * @export
 * @interface RexLine
 */
export interface RexLine {
    /**
     * 
     * @type {string}
     * @memberof RexLine
     */
    lineNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof RexLine
     */
    healthCertificateDescription?: string;
    /**
     * 
     * @type {FormType}
     * @memberof RexLine
     */
    primaryCertificate?: FormType;
    /**
     * 
     * @type {FormType}
     * @memberof RexLine
     */
    secondaryCertificate?: FormType;
}
/**
 * 
 * @export
 * @interface RexResponseDetails
 */
export interface RexResponseDetails {
    /**
     * 
     * @type {Identification}
     * @memberof RexResponseDetails
     */
    identification?: Identification;
    /**
     * 
     * @type {string}
     * @memberof RexResponseDetails
     */
    complianceStatus?: RexResponseDetails.ComplianceStatusEnum;
    /**
     * 
     * @type {Date}
     * @memberof RexResponseDetails
     */
    lastAmendDateTime?: Date;
    /**
     * 
     * @type {string}
     * @memberof RexResponseDetails
     */
    exporterReference?: string;
    /**
     * 
     * @type {string}
     * @memberof RexResponseDetails
     */
    permitNumber?: string;
}

/**
 * @export
 * @namespace RexResponseDetails
 */
export namespace RexResponseDetails {
    /**
     * @export
     * @enum {string}
     */
    export enum ComplianceStatusEnum {
        CANC = <any> 'CANC',
        COMP = <any> 'COMP',
        EMHC = <any> 'EMHC',
        FINL = <any> 'FINL',
        CTRD = <any> 'CTRD',
        INIT = <any> 'INIT',
        INSP = <any> 'INSP',
        ORDR = <any> 'ORDR',
        REVIEW = <any> 'REVIEW',
        SUSP = <any> 'SUSP',
        WTDRN = <any> 'WTDRN'
    }
}
/**
 * 
 * @export
 * @interface StreetAddress
 */
export interface StreetAddress {
    /**
     * 
     * @type {Array<string>}
     * @memberof StreetAddress
     */
    streetLines?: Array<string>;
}
/**
 * 
 * @export
 * @interface SubmissionIdentification
 */
export interface SubmissionIdentification {
    /**
     * 
     * @type {string}
     * @memberof SubmissionIdentification
     */
    rexNumber?: string;
    /**
     * 
     * @type {Date}
     * @memberof SubmissionIdentification
     */
    lastAmendDateTime?: Date;
}
/**
 * 
 * @export
 * @interface TelephoneNumber
 */
export interface TelephoneNumber {
    /**
     * 
     * @type {string}
     * @memberof TelephoneNumber
     */
    type?: TelephoneNumber.TypeEnum;
    /**
     * 
     * @type {string}
     * @memberof TelephoneNumber
     */
    value?: string;
}

/**
 * @export
 * @namespace TelephoneNumber
 */
export namespace TelephoneNumber {
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        W = <any> 'W',
        M = <any> 'M',
        F = <any> 'F',
        P = <any> 'P'
    }
}
/**
 * 
 * @export
 * @interface Temperature
 */
export interface Temperature {
    /**
     * 
     * @type {string}
     * @memberof Temperature
     */
    unit?: string;
    /**
     * 
     * @type {number}
     * @memberof Temperature
     */
    value?: number;
}
/**
 * 
 * @export
 * @interface TransitCountries
 */
export interface TransitCountries {
    /**
     * 
     * @type {Array<string>}
     * @memberof TransitCountries
     */
    values?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof TransitCountries
     */
    removeExistingSet?: boolean;
}
/**
 * 
 * @export
 * @interface TransportDetails
 */
export interface TransportDetails {
    /**
     * 
     * @type {string}
     * @memberof TransportDetails
     */
    transportMode?: TransportDetails.TransportModeEnum;
    /**
     * 
     * @type {string}
     * @memberof TransportDetails
     */
    voyageOrFlightNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof TransportDetails
     */
    vesselName?: string;
    /**
     * 
     * @type {string}
     * @memberof TransportDetails
     */
    shippingCompany?: string;
    /**
     * 
     * @type {Temperature}
     * @memberof TransportDetails
     */
    storeTransportTemperature?: Temperature;
    /**
     * 
     * @type {string}
     * @memberof TransportDetails
     */
    transferInformation?: string;
    /**
     * 
     * @type {VesselHoldSeal}
     * @memberof TransportDetails
     */
    vesselHoldSeals?: VesselHoldSeal;
    /**
     * 
     * @type {EuPlaceOfDestinationDetails}
     * @memberof TransportDetails
     */
    euPlaceOfDestinationDetail?: EuPlaceOfDestinationDetails;
    /**
     * 
     * @type {string}
     * @memberof TransportDetails
     */
    imo?: string;
    /**
     * 
     * @type {string}
     * @memberof TransportDetails
     */
    countryShipFlag?: string;
}

/**
 * @export
 * @namespace TransportDetails
 */
export namespace TransportDetails {
    /**
     * @export
     * @enum {string}
     */
    export enum TransportModeEnum {
        S = <any> 'S',
        A = <any> 'A',
        M = <any> 'M'
    }
}
/**
 * 
 * @export
 * @interface TreatmentType
 */
export interface TreatmentType {
    /**
     * 
     * @type {string}
     * @memberof TreatmentType
     */
    treatmentCode?: string;
    /**
     * 
     * @type {string}
     * @memberof TreatmentType
     */
    treatmentStartDate?: string;
    /**
     * 
     * @type {string}
     * @memberof TreatmentType
     */
    treatmentEndDate?: string;
    /**
     * 
     * @type {string}
     * @memberof TreatmentType
     */
    treatmentInformation?: string;
}
/**
 * 
 * @export
 * @interface Treatments
 */
export interface Treatments {
    /**
     * 
     * @type {Array<TreatmentType>}
     * @memberof Treatments
     */
    values?: Array<TreatmentType>;
    /**
     * 
     * @type {boolean}
     * @memberof Treatments
     */
    removeExistingSet?: boolean;
}
/**
 * 
 * @export
 * @interface UnitAmount
 */
export interface UnitAmount {
    /**
     * 
     * @type {string}
     * @memberof UnitAmount
     */
    unit?: string;
    /**
     * 
     * @type {number}
     * @memberof UnitAmount
     */
    value?: number;
}
/**
 * 
 * @export
 * @interface VesselHoldSeal
 */
export interface VesselHoldSeal {
    /**
     * 
     * @type {string}
     * @memberof VesselHoldSeal
     */
    sealStartNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof VesselHoldSeal
     */
    sealEndNumber?: string;
}
/**
 * 
 * @export
 * @interface Weight
 */
export interface Weight {
    /**
     * 
     * @type {string}
     * @memberof Weight
     */
    unit?: string;
    /**
     * 
     * @type {number}
     * @memberof Weight
     */
    value?: number;
}
/**
 * HealthApi - fetch parameter creator
 * @export
 */
export const HealthApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheck(options: any = {}): FetchArgs {
            const localVarPath = `/health`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication function_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("code")
					: configuration.apiKey;
                localVarQueryParameter["code"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            //delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HealthApi - functional programming interface
 * @export
 */
export const HealthApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheck(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<HealthCheckResponse> {
            const localVarFetchArgs = HealthApiFetchParamCreator(configuration).healthCheck(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * HealthApi - factory interface
 * @export
 */
export const HealthApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheck(options?: any) {
            return HealthApiFp(configuration).healthCheck(options)(fetch, basePath);
        },
    };
};

/**
 * HealthApi - object-oriented interface
 * @export
 * @class HealthApi
 * @extends {BaseAPI}
 */
export class HealthApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApi
     */
    public healthCheck(options?: any) {
        return HealthApiFp(this.configuration).healthCheck(options)(this.fetch, this.basePath);
    }

}
/**
 * InboundRequestApi - fetch parameter creator
 * @export
 */
export const InboundRequestApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [body] The body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        run(body?: string, options: any = {}): FetchArgs {
            const localVarPath = `/InboundRfpAmendRequest`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication function_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("code")
					: configuration.apiKey;
                localVarQueryParameter["code"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'text/xml';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            //delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"string" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InboundRequestApi - functional programming interface
 * @export
 */
export const InboundRequestApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [body] The body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        run(body?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = InboundRequestApiFetchParamCreator(configuration).run(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * InboundRequestApi - factory interface
 * @export
 */
export const InboundRequestApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {string} [body] The body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        run(body?: string, options?: any) {
            return InboundRequestApiFp(configuration).run(body, options)(fetch, basePath);
        },
    };
};

/**
 * InboundRequestApi - object-oriented interface
 * @export
 * @class InboundRequestApi
 * @extends {BaseAPI}
 */
export class InboundRequestApi extends BaseAPI {
    /**
     * 
     * @param {string} [body] The body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InboundRequestApi
     */
    public run(body?: string, options?: any) {
        return InboundRequestApiFp(this.configuration).run(body, options)(this.fetch, this.basePath);
    }

}
/**
 * JsonSchemaApi - fetch parameter creator
 * @export
 */
export const JsonSchemaApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jsonSchema(options: any = {}): FetchArgs {
            const localVarPath = `/json-schema`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication function_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("code")
					: configuration.apiKey;
                localVarQueryParameter["code"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            //delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * JsonSchemaApi - functional programming interface
 * @export
 */
export const JsonSchemaApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jsonSchema(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = JsonSchemaApiFetchParamCreator(configuration).jsonSchema(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * JsonSchemaApi - factory interface
 * @export
 */
export const JsonSchemaApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jsonSchema(options?: any) {
            return JsonSchemaApiFp(configuration).jsonSchema(options)(fetch, basePath);
        },
    };
};

/**
 * JsonSchemaApi - object-oriented interface
 * @export
 * @class JsonSchemaApi
 * @extends {BaseAPI}
 */
export class JsonSchemaApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JsonSchemaApi
     */
    public jsonSchema(options?: any) {
        return JsonSchemaApiFp(this.configuration).jsonSchema(options)(this.fetch, this.basePath);
    }

}
/**
 * NameApi - fetch parameter creator
 * @export
 */
export const NameApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testPartyService(options: any = {}): FetchArgs {
            const localVarPath = `/TestPartyService`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            //delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testRequestService(options: any = {}): FetchArgs {
            const localVarPath = `/TestRequestService`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            //delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NameApi - functional programming interface
 * @export
 */
export const NameApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testPartyService(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = NameApiFetchParamCreator(configuration).testPartyService(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testRequestService(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = NameApiFetchParamCreator(configuration).testRequestService(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * NameApi - factory interface
 * @export
 */
export const NameApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testPartyService(options?: any) {
            return NameApiFp(configuration).testPartyService(options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testRequestService(options?: any) {
            return NameApiFp(configuration).testRequestService(options)(fetch, basePath);
        },
    };
};

/**
 * NameApi - object-oriented interface
 * @export
 * @class NameApi
 * @extends {BaseAPI}
 */
export class NameApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NameApi
     */
    public testPartyService(options?: any) {
        return NameApiFp(this.configuration).testPartyService(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NameApi
     */
    public testRequestService(options?: any) {
        return NameApiFp(this.configuration).testRequestService(options)(this.fetch, this.basePath);
    }

}
/**
 * PermitsApi - fetch parameter creator
 * @export
 */
export const PermitsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {EpacAmendRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amendRequest(body: EpacAmendRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling amendRequest.');
            }
            const localVarPath = `/AmendCertificate`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            //delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"EpacAmendRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {EpacLodgeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lodgeRequest(body: EpacLodgeRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling lodgeRequest.');
            }
            const localVarPath = `/LodgeCertificate`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            //delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"EpacLodgeRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {EpacOrderRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderRequest(body: EpacOrderRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling orderRequest.');
            }
            const localVarPath = `/OrderCertificate`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            //delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"EpacOrderRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PermitsApi - functional programming interface
 * @export
 */
export const PermitsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {EpacAmendRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amendRequest(body: EpacAmendRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EpacAmendResponse> {
            const localVarFetchArgs = PermitsApiFetchParamCreator(configuration).amendRequest(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {EpacLodgeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lodgeRequest(body: EpacLodgeRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EpacLodgeResponse> {
            const localVarFetchArgs = PermitsApiFetchParamCreator(configuration).lodgeRequest(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {EpacOrderRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderRequest(body: EpacOrderRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EpacOrderResponse> {
            const localVarFetchArgs = PermitsApiFetchParamCreator(configuration).orderRequest(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * PermitsApi - factory interface
 * @export
 */
export const PermitsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {EpacAmendRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amendRequest(body: EpacAmendRequest, options?: any) {
            return PermitsApiFp(configuration).amendRequest(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {EpacLodgeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lodgeRequest(body: EpacLodgeRequest, options?: any) {
            return PermitsApiFp(configuration).lodgeRequest(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {EpacOrderRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderRequest(body: EpacOrderRequest, options?: any) {
            return PermitsApiFp(configuration).orderRequest(body, options)(fetch, basePath);
        },
    };
};

/**
 * PermitsApi - object-oriented interface
 * @export
 * @class PermitsApi
 * @extends {BaseAPI}
 */
export class PermitsApi extends BaseAPI {
    /**
     * 
     * @param {EpacAmendRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermitsApi
     */
    public amendRequest(body: EpacAmendRequest, options?: any) {
        return PermitsApiFp(this.configuration).amendRequest(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {EpacLodgeRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermitsApi
     */
    public lodgeRequest(body: EpacLodgeRequest, options?: any) {
        return PermitsApiFp(this.configuration).lodgeRequest(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {EpacOrderRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermitsApi
     */
    public orderRequest(body: EpacOrderRequest, options?: any) {
        return PermitsApiFp(this.configuration).orderRequest(body, options)(this.fetch, this.basePath);
    }

}
/**
 * REXApi - fetch parameter creator
 * @export
 */
export const REXApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * read REX
         * @summary Your GET endpoint
         * @param {string} rexNumber REX Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRex(rexNumber: string, options: any = {}): FetchArgs {
            // verify required parameter 'rexNumber' is not null or undefined
            if (rexNumber === null || rexNumber === undefined) {
                throw new RequiredError('rexNumber','Required parameter rexNumber was null or undefined when calling getRex.');
            }
            const localVarPath = `/Rex/{rexNumber}`
                .replace(`{${"rexNumber"}}`, encodeURIComponent(String(rexNumber)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            //delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * REXApi - functional programming interface
 * @export
 */
export const REXApiFp = function(configuration?: Configuration) {
    return {
        /**
         * read REX
         * @summary Your GET endpoint
         * @param {string} rexNumber REX Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRex(rexNumber: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ReadRexResponse> {
            const localVarFetchArgs = REXApiFetchParamCreator(configuration).getRex(rexNumber, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * REXApi - factory interface
 * @export
 */
export const REXApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * read REX
         * @summary Your GET endpoint
         * @param {string} rexNumber REX Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRex(rexNumber: string, options?: any) {
            return REXApiFp(configuration).getRex(rexNumber, options)(fetch, basePath);
        },
    };
};

/**
 * REXApi - object-oriented interface
 * @export
 * @class REXApi
 * @extends {BaseAPI}
 */
export class REXApi extends BaseAPI {
    /**
     * read REX
     * @summary Your GET endpoint
     * @param {string} rexNumber REX Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof REXApi
     */
    public getRex(rexNumber: string, options?: any) {
        return REXApiFp(this.configuration).getRex(rexNumber, options)(this.fetch, this.basePath);
    }

}
